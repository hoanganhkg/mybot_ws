// Generated by gencpp from file utils/distance_msgs.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_DISTANCE_MSGS_H
#define UTILS_MESSAGE_DISTANCE_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct distance_msgs_
{
  typedef distance_msgs_<ContainerAllocator> Type;

  distance_msgs_()
    : dis_x(0.0)
    , dis_y(0.0)
    , orient_z(0.0)
    , orient_w(0.0)  {
    }
  distance_msgs_(const ContainerAllocator& _alloc)
    : dis_x(0.0)
    , dis_y(0.0)
    , orient_z(0.0)
    , orient_w(0.0)  {
  (void)_alloc;
    }



   typedef double _dis_x_type;
  _dis_x_type dis_x;

   typedef double _dis_y_type;
  _dis_y_type dis_y;

   typedef double _orient_z_type;
  _orient_z_type orient_z;

   typedef double _orient_w_type;
  _orient_w_type orient_w;





  typedef boost::shared_ptr< ::utils::distance_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::distance_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct distance_msgs_

typedef ::utils::distance_msgs_<std::allocator<void> > distance_msgs;

typedef boost::shared_ptr< ::utils::distance_msgs > distance_msgsPtr;
typedef boost::shared_ptr< ::utils::distance_msgs const> distance_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::distance_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::distance_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::distance_msgs_<ContainerAllocator1> & lhs, const ::utils::distance_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.dis_x == rhs.dis_x &&
    lhs.dis_y == rhs.dis_y &&
    lhs.orient_z == rhs.orient_z &&
    lhs.orient_w == rhs.orient_w;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::distance_msgs_<ContainerAllocator1> & lhs, const ::utils::distance_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::distance_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::distance_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::distance_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::distance_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::distance_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::distance_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::distance_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "755117db4347f5445de21da69b3fd8c0";
  }

  static const char* value(const ::utils::distance_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x755117db4347f544ULL;
  static const uint64_t static_value2 = 0x5de21da69b3fd8c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::distance_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/distance_msgs";
  }

  static const char* value(const ::utils::distance_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::distance_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dis_x\n"
"float64 dis_y\n"
"float64 orient_z \n"
"float64 orient_w\n"
;
  }

  static const char* value(const ::utils::distance_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::distance_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dis_x);
      stream.next(m.dis_y);
      stream.next(m.orient_z);
      stream.next(m.orient_w);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distance_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::distance_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::distance_msgs_<ContainerAllocator>& v)
  {
    s << indent << "dis_x: ";
    Printer<double>::stream(s, indent + "  ", v.dis_x);
    s << indent << "dis_y: ";
    Printer<double>::stream(s, indent + "  ", v.dis_y);
    s << indent << "orient_z: ";
    Printer<double>::stream(s, indent + "  ", v.orient_z);
    s << indent << "orient_w: ";
    Printer<double>::stream(s, indent + "  ", v.orient_w);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_DISTANCE_MSGS_H
