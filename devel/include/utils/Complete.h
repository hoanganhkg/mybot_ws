// Generated by gencpp from file utils/Complete.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_COMPLETE_H
#define UTILS_MESSAGE_COMPLETE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct Complete_
{
  typedef Complete_<ContainerAllocator> Type;

  Complete_()
    : complete(false)
    , complete_indoor(false)  {
    }
  Complete_(const ContainerAllocator& _alloc)
    : complete(false)
    , complete_indoor(false)  {
  (void)_alloc;
    }



   typedef uint8_t _complete_type;
  _complete_type complete;

   typedef uint8_t _complete_indoor_type;
  _complete_indoor_type complete_indoor;





  typedef boost::shared_ptr< ::utils::Complete_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::Complete_<ContainerAllocator> const> ConstPtr;

}; // struct Complete_

typedef ::utils::Complete_<std::allocator<void> > Complete;

typedef boost::shared_ptr< ::utils::Complete > CompletePtr;
typedef boost::shared_ptr< ::utils::Complete const> CompleteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::Complete_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::Complete_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::Complete_<ContainerAllocator1> & lhs, const ::utils::Complete_<ContainerAllocator2> & rhs)
{
  return lhs.complete == rhs.complete &&
    lhs.complete_indoor == rhs.complete_indoor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::Complete_<ContainerAllocator1> & lhs, const ::utils::Complete_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::Complete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Complete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Complete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Complete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Complete_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Complete_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::Complete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad8ef68768c0543c275c56756a7b1615";
  }

  static const char* value(const ::utils::Complete_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad8ef68768c0543cULL;
  static const uint64_t static_value2 = 0x275c56756a7b1615ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::Complete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/Complete";
  }

  static const char* value(const ::utils::Complete_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::Complete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool complete \n"
"bool complete_indoor\n"
"\n"
;
  }

  static const char* value(const ::utils::Complete_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::Complete_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.complete);
      stream.next(m.complete_indoor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Complete_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::Complete_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::Complete_<ContainerAllocator>& v)
  {
    s << indent << "complete: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.complete);
    s << indent << "complete_indoor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.complete_indoor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_COMPLETE_H
