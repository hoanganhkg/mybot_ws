// Generated by gencpp from file utils/goal_indoor.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_GOAL_INDOOR_H
#define UTILS_MESSAGE_GOAL_INDOOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct goal_indoor_
{
  typedef goal_indoor_<ContainerAllocator> Type;

  goal_indoor_()
    : goal_indoor(0.0)
    , way_x_0(0.0)
    , way_x_1(0.0)
    , way_x_2(0.0)
    , way_y_0(0.0)
    , way_y_1(0.0)
    , way_y_2(0.0)  {
    }
  goal_indoor_(const ContainerAllocator& _alloc)
    : goal_indoor(0.0)
    , way_x_0(0.0)
    , way_x_1(0.0)
    , way_x_2(0.0)
    , way_y_0(0.0)
    , way_y_1(0.0)
    , way_y_2(0.0)  {
  (void)_alloc;
    }



   typedef float _goal_indoor_type;
  _goal_indoor_type goal_indoor;

   typedef float _way_x_0_type;
  _way_x_0_type way_x_0;

   typedef float _way_x_1_type;
  _way_x_1_type way_x_1;

   typedef float _way_x_2_type;
  _way_x_2_type way_x_2;

   typedef float _way_y_0_type;
  _way_y_0_type way_y_0;

   typedef float _way_y_1_type;
  _way_y_1_type way_y_1;

   typedef float _way_y_2_type;
  _way_y_2_type way_y_2;





  typedef boost::shared_ptr< ::utils::goal_indoor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::goal_indoor_<ContainerAllocator> const> ConstPtr;

}; // struct goal_indoor_

typedef ::utils::goal_indoor_<std::allocator<void> > goal_indoor;

typedef boost::shared_ptr< ::utils::goal_indoor > goal_indoorPtr;
typedef boost::shared_ptr< ::utils::goal_indoor const> goal_indoorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::goal_indoor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::goal_indoor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::goal_indoor_<ContainerAllocator1> & lhs, const ::utils::goal_indoor_<ContainerAllocator2> & rhs)
{
  return lhs.goal_indoor == rhs.goal_indoor &&
    lhs.way_x_0 == rhs.way_x_0 &&
    lhs.way_x_1 == rhs.way_x_1 &&
    lhs.way_x_2 == rhs.way_x_2 &&
    lhs.way_y_0 == rhs.way_y_0 &&
    lhs.way_y_1 == rhs.way_y_1 &&
    lhs.way_y_2 == rhs.way_y_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::goal_indoor_<ContainerAllocator1> & lhs, const ::utils::goal_indoor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::goal_indoor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::goal_indoor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::goal_indoor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::goal_indoor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::goal_indoor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::goal_indoor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::goal_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad1b5000cc6755776de425ca68529153";
  }

  static const char* value(const ::utils::goal_indoor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad1b5000cc675577ULL;
  static const uint64_t static_value2 = 0x6de425ca68529153ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::goal_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/goal_indoor";
  }

  static const char* value(const ::utils::goal_indoor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::goal_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 goal_indoor\n"
"\n"
"float32 way_x_0\n"
"float32 way_x_1\n"
"float32 way_x_2 \n"
"\n"
"float32 way_y_0 \n"
"float32 way_y_1 \n"
"float32 way_y_2 \n"
"\n"
;
  }

  static const char* value(const ::utils::goal_indoor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::goal_indoor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_indoor);
      stream.next(m.way_x_0);
      stream.next(m.way_x_1);
      stream.next(m.way_x_2);
      stream.next(m.way_y_0);
      stream.next(m.way_y_1);
      stream.next(m.way_y_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goal_indoor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::goal_indoor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::goal_indoor_<ContainerAllocator>& v)
  {
    s << indent << "goal_indoor: ";
    Printer<float>::stream(s, indent + "  ", v.goal_indoor);
    s << indent << "way_x_0: ";
    Printer<float>::stream(s, indent + "  ", v.way_x_0);
    s << indent << "way_x_1: ";
    Printer<float>::stream(s, indent + "  ", v.way_x_1);
    s << indent << "way_x_2: ";
    Printer<float>::stream(s, indent + "  ", v.way_x_2);
    s << indent << "way_y_0: ";
    Printer<float>::stream(s, indent + "  ", v.way_y_0);
    s << indent << "way_y_1: ";
    Printer<float>::stream(s, indent + "  ", v.way_y_1);
    s << indent << "way_y_2: ";
    Printer<float>::stream(s, indent + "  ", v.way_y_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_GOAL_INDOOR_H
