// Generated by gencpp from file utils/mode_indoor.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_MODE_INDOOR_H
#define UTILS_MESSAGE_MODE_INDOOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct mode_indoor_
{
  typedef mode_indoor_<ContainerAllocator> Type;

  mode_indoor_()
    : mode_indoor(0)
    , set_complete_indoor(false)
    , abc(0.0)  {
    }
  mode_indoor_(const ContainerAllocator& _alloc)
    : mode_indoor(0)
    , set_complete_indoor(false)
    , abc(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_indoor_type;
  _mode_indoor_type mode_indoor;

   typedef uint8_t _set_complete_indoor_type;
  _set_complete_indoor_type set_complete_indoor;

   typedef double _abc_type;
  _abc_type abc;





  typedef boost::shared_ptr< ::utils::mode_indoor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::mode_indoor_<ContainerAllocator> const> ConstPtr;

}; // struct mode_indoor_

typedef ::utils::mode_indoor_<std::allocator<void> > mode_indoor;

typedef boost::shared_ptr< ::utils::mode_indoor > mode_indoorPtr;
typedef boost::shared_ptr< ::utils::mode_indoor const> mode_indoorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::mode_indoor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::mode_indoor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::mode_indoor_<ContainerAllocator1> & lhs, const ::utils::mode_indoor_<ContainerAllocator2> & rhs)
{
  return lhs.mode_indoor == rhs.mode_indoor &&
    lhs.set_complete_indoor == rhs.set_complete_indoor &&
    lhs.abc == rhs.abc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::mode_indoor_<ContainerAllocator1> & lhs, const ::utils::mode_indoor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::mode_indoor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::mode_indoor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::mode_indoor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::mode_indoor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::mode_indoor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::mode_indoor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::mode_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcef5ac4b0e09704e023b93597e3b078";
  }

  static const char* value(const ::utils::mode_indoor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcef5ac4b0e09704ULL;
  static const uint64_t static_value2 = 0xe023b93597e3b078ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::mode_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/mode_indoor";
  }

  static const char* value(const ::utils::mode_indoor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::mode_indoor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mode_indoor\n"
"bool set_complete_indoor\n"
"float64 abc\n"
;
  }

  static const char* value(const ::utils::mode_indoor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::mode_indoor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode_indoor);
      stream.next(m.set_complete_indoor);
      stream.next(m.abc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mode_indoor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::mode_indoor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::mode_indoor_<ContainerAllocator>& v)
  {
    s << indent << "mode_indoor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_indoor);
    s << indent << "set_complete_indoor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_complete_indoor);
    s << indent << "abc: ";
    Printer<double>::stream(s, indent + "  ", v.abc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_MODE_INDOOR_H
