// Generated by gencpp from file utils/obtacles.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_OBTACLES_H
#define UTILS_MESSAGE_OBTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace utils
{
template <class ContainerAllocator>
struct obtacles_
{
  typedef obtacles_<ContainerAllocator> Type;

  obtacles_()
    : header()
    , sonar_left(false)
    , sonar_right(false)
    , left_dis_sonar(0.0)
    , right_dis_sonar(0.0)
    , lidar(false)
    , left_ver_lidar(0.0)
    , right_ver_lidar(0.0)
    , angle_avoid_lidar(0.0)  {
    }
  obtacles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sonar_left(false)
    , sonar_right(false)
    , left_dis_sonar(0.0)
    , right_dis_sonar(0.0)
    , lidar(false)
    , left_ver_lidar(0.0)
    , right_ver_lidar(0.0)
    , angle_avoid_lidar(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _sonar_left_type;
  _sonar_left_type sonar_left;

   typedef uint8_t _sonar_right_type;
  _sonar_right_type sonar_right;

   typedef float _left_dis_sonar_type;
  _left_dis_sonar_type left_dis_sonar;

   typedef float _right_dis_sonar_type;
  _right_dis_sonar_type right_dis_sonar;

   typedef uint8_t _lidar_type;
  _lidar_type lidar;

   typedef float _left_ver_lidar_type;
  _left_ver_lidar_type left_ver_lidar;

   typedef float _right_ver_lidar_type;
  _right_ver_lidar_type right_ver_lidar;

   typedef float _angle_avoid_lidar_type;
  _angle_avoid_lidar_type angle_avoid_lidar;





  typedef boost::shared_ptr< ::utils::obtacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::obtacles_<ContainerAllocator> const> ConstPtr;

}; // struct obtacles_

typedef ::utils::obtacles_<std::allocator<void> > obtacles;

typedef boost::shared_ptr< ::utils::obtacles > obtaclesPtr;
typedef boost::shared_ptr< ::utils::obtacles const> obtaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::obtacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::obtacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::obtacles_<ContainerAllocator1> & lhs, const ::utils::obtacles_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sonar_left == rhs.sonar_left &&
    lhs.sonar_right == rhs.sonar_right &&
    lhs.left_dis_sonar == rhs.left_dis_sonar &&
    lhs.right_dis_sonar == rhs.right_dis_sonar &&
    lhs.lidar == rhs.lidar &&
    lhs.left_ver_lidar == rhs.left_ver_lidar &&
    lhs.right_ver_lidar == rhs.right_ver_lidar &&
    lhs.angle_avoid_lidar == rhs.angle_avoid_lidar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::obtacles_<ContainerAllocator1> & lhs, const ::utils::obtacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::obtacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::obtacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::obtacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::obtacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::obtacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::obtacles_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::obtacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f846863e66577b5d671e0a2f062d383";
  }

  static const char* value(const ::utils::obtacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f846863e66577b5ULL;
  static const uint64_t static_value2 = 0xd671e0a2f062d383ULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::obtacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/obtacles";
  }

  static const char* value(const ::utils::obtacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::obtacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool sonar_left\n"
"bool sonar_right\n"
"\n"
"float32 left_dis_sonar\n"
"float32 right_dis_sonar\n"
"\n"
"bool lidar\n"
"float32 left_ver_lidar\n"
"float32 right_ver_lidar\n"
"float32 angle_avoid_lidar\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::utils::obtacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::obtacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sonar_left);
      stream.next(m.sonar_right);
      stream.next(m.left_dis_sonar);
      stream.next(m.right_dis_sonar);
      stream.next(m.lidar);
      stream.next(m.left_ver_lidar);
      stream.next(m.right_ver_lidar);
      stream.next(m.angle_avoid_lidar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obtacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::obtacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::obtacles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sonar_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sonar_left);
    s << indent << "sonar_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sonar_right);
    s << indent << "left_dis_sonar: ";
    Printer<float>::stream(s, indent + "  ", v.left_dis_sonar);
    s << indent << "right_dis_sonar: ";
    Printer<float>::stream(s, indent + "  ", v.right_dis_sonar);
    s << indent << "lidar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lidar);
    s << indent << "left_ver_lidar: ";
    Printer<float>::stream(s, indent + "  ", v.left_ver_lidar);
    s << indent << "right_ver_lidar: ";
    Printer<float>::stream(s, indent + "  ", v.right_ver_lidar);
    s << indent << "angle_avoid_lidar: ";
    Printer<float>::stream(s, indent + "  ", v.angle_avoid_lidar);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_OBTACLES_H
