// Generated by gencpp from file utils/heading_plot.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_HEADING_PLOT_H
#define UTILS_MESSAGE_HEADING_PLOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct heading_plot_
{
  typedef heading_plot_<ContainerAllocator> Type;

  heading_plot_()
    : CurrX_indoor(0.0)
    , exit_indoor(false)  {
    }
  heading_plot_(const ContainerAllocator& _alloc)
    : CurrX_indoor(0.0)
    , exit_indoor(false)  {
  (void)_alloc;
    }



   typedef double _CurrX_indoor_type;
  _CurrX_indoor_type CurrX_indoor;

   typedef uint8_t _exit_indoor_type;
  _exit_indoor_type exit_indoor;





  typedef boost::shared_ptr< ::utils::heading_plot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::heading_plot_<ContainerAllocator> const> ConstPtr;

}; // struct heading_plot_

typedef ::utils::heading_plot_<std::allocator<void> > heading_plot;

typedef boost::shared_ptr< ::utils::heading_plot > heading_plotPtr;
typedef boost::shared_ptr< ::utils::heading_plot const> heading_plotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::heading_plot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::heading_plot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::heading_plot_<ContainerAllocator1> & lhs, const ::utils::heading_plot_<ContainerAllocator2> & rhs)
{
  return lhs.CurrX_indoor == rhs.CurrX_indoor &&
    lhs.exit_indoor == rhs.exit_indoor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::heading_plot_<ContainerAllocator1> & lhs, const ::utils::heading_plot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::heading_plot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::heading_plot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::heading_plot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::heading_plot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::heading_plot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::heading_plot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::heading_plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ed3e3540501bff48c532877c801a09c";
  }

  static const char* value(const ::utils::heading_plot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ed3e3540501bff4ULL;
  static const uint64_t static_value2 = 0x8c532877c801a09cULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::heading_plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/heading_plot";
  }

  static const char* value(const ::utils::heading_plot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::heading_plot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 CurrX_indoor\n"
"bool exit_indoor\n"
;
  }

  static const char* value(const ::utils::heading_plot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::heading_plot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CurrX_indoor);
      stream.next(m.exit_indoor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct heading_plot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::heading_plot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::heading_plot_<ContainerAllocator>& v)
  {
    s << indent << "CurrX_indoor: ";
    Printer<double>::stream(s, indent + "  ", v.CurrX_indoor);
    s << indent << "exit_indoor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exit_indoor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_HEADING_PLOT_H
