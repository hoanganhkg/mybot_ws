// Generated by gencpp from file utils/Odometry_gps.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_ODOMETRY_GPS_H
#define UTILS_MESSAGE_ODOMETRY_GPS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace utils
{
template <class ContainerAllocator>
struct Odometry_gps_
{
  typedef Odometry_gps_<ContainerAllocator> Type;

  Odometry_gps_()
    : header()
    , child_frame_id()
    , position()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , x_indoor(0.0)
    , y_indoor(0.0)
    , mode_in(0.0)  {
    }
  Odometry_gps_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , position(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , x_indoor(0.0)
    , y_indoor(0.0)
    , mode_in(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _x_indoor_type;
  _x_indoor_type x_indoor;

   typedef double _y_indoor_type;
  _y_indoor_type y_indoor;

   typedef double _mode_in_type;
  _mode_in_type mode_in;





  typedef boost::shared_ptr< ::utils::Odometry_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::Odometry_gps_<ContainerAllocator> const> ConstPtr;

}; // struct Odometry_gps_

typedef ::utils::Odometry_gps_<std::allocator<void> > Odometry_gps;

typedef boost::shared_ptr< ::utils::Odometry_gps > Odometry_gpsPtr;
typedef boost::shared_ptr< ::utils::Odometry_gps const> Odometry_gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::Odometry_gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::Odometry_gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::Odometry_gps_<ContainerAllocator1> & lhs, const ::utils::Odometry_gps_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.position == rhs.position &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.x_indoor == rhs.x_indoor &&
    lhs.y_indoor == rhs.y_indoor &&
    lhs.mode_in == rhs.mode_in;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::Odometry_gps_<ContainerAllocator1> & lhs, const ::utils::Odometry_gps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::Odometry_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Odometry_gps_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Odometry_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Odometry_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Odometry_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Odometry_gps_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::Odometry_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bca37e60f88b0c8d12c32e6fbbe7a5ba";
  }

  static const char* value(const ::utils::Odometry_gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbca37e60f88b0c8dULL;
  static const uint64_t static_value2 = 0x12c32e6fbbe7a5baULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::Odometry_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/Odometry_gps";
  }

  static const char* value(const ::utils::Odometry_gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::Odometry_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string child_frame_id\n"
"\n"
"geometry_msgs/Vector3 position\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"float64 x_indoor\n"
"float64 y_indoor\n"
"float64 mode_in\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::utils::Odometry_gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::Odometry_gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.position);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.x_indoor);
      stream.next(m.y_indoor);
      stream.next(m.mode_in);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odometry_gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::Odometry_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::Odometry_gps_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "x_indoor: ";
    Printer<double>::stream(s, indent + "  ", v.x_indoor);
    s << indent << "y_indoor: ";
    Printer<double>::stream(s, indent + "  ", v.y_indoor);
    s << indent << "mode_in: ";
    Printer<double>::stream(s, indent + "  ", v.mode_in);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_ODOMETRY_GPS_H
