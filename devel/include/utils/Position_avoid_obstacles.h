// Generated by gencpp from file utils/Position_avoid_obstacles.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_POSITION_AVOID_OBSTACLES_H
#define UTILS_MESSAGE_POSITION_AVOID_OBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct Position_avoid_obstacles_
{
  typedef Position_avoid_obstacles_<ContainerAllocator> Type;

  Position_avoid_obstacles_()
    : position_avoid_x(0.0)
    , position_avoid_y(0.0)
    , obstacles(false)  {
    }
  Position_avoid_obstacles_(const ContainerAllocator& _alloc)
    : position_avoid_x(0.0)
    , position_avoid_y(0.0)
    , obstacles(false)  {
  (void)_alloc;
    }



   typedef double _position_avoid_x_type;
  _position_avoid_x_type position_avoid_x;

   typedef double _position_avoid_y_type;
  _position_avoid_y_type position_avoid_y;

   typedef uint8_t _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::utils::Position_avoid_obstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::Position_avoid_obstacles_<ContainerAllocator> const> ConstPtr;

}; // struct Position_avoid_obstacles_

typedef ::utils::Position_avoid_obstacles_<std::allocator<void> > Position_avoid_obstacles;

typedef boost::shared_ptr< ::utils::Position_avoid_obstacles > Position_avoid_obstaclesPtr;
typedef boost::shared_ptr< ::utils::Position_avoid_obstacles const> Position_avoid_obstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::Position_avoid_obstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::Position_avoid_obstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::Position_avoid_obstacles_<ContainerAllocator1> & lhs, const ::utils::Position_avoid_obstacles_<ContainerAllocator2> & rhs)
{
  return lhs.position_avoid_x == rhs.position_avoid_x &&
    lhs.position_avoid_y == rhs.position_avoid_y &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::Position_avoid_obstacles_<ContainerAllocator1> & lhs, const ::utils::Position_avoid_obstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Position_avoid_obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Position_avoid_obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Position_avoid_obstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "323d00985a22ae750436ee67965d415b";
  }

  static const char* value(const ::utils::Position_avoid_obstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x323d00985a22ae75ULL;
  static const uint64_t static_value2 = 0x0436ee67965d415bULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/Position_avoid_obstacles";
  }

  static const char* value(const ::utils::Position_avoid_obstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position_avoid_x\n"
"float64 position_avoid_y\n"
"\n"
"bool obstacles \n"
;
  }

  static const char* value(const ::utils::Position_avoid_obstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_avoid_x);
      stream.next(m.position_avoid_y);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Position_avoid_obstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::Position_avoid_obstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::Position_avoid_obstacles_<ContainerAllocator>& v)
  {
    s << indent << "position_avoid_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_avoid_x);
    s << indent << "position_avoid_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_avoid_y);
    s << indent << "obstacles: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_POSITION_AVOID_OBSTACLES_H
